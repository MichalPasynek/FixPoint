services:
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fixpoint
    ports:
      - "8080:8080"
    depends_on:
      - postgres-fixpoint
      - redis-fixpoint
      - keycloak-fixpoint
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-fixpoint:5432/fixpoint
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis-fixpoint
      KEYCLOAK_ISSUER_URI: http://keycloak-fixpoint:8080/realms/fixpoint-realm
    env_file:
      - .env
    networks:
      - fixpoint-network

  postgres-fixpoint:
    image: postgres:16
    container_name: postgres-fixpoint
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d fixpoint" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres:/docker-entrypoint-initdb.d
    networks:
      - fixpoint-network

  keycloak-fixpoint:
    image: quay.io/keycloak/keycloak:25.0.0
    container_name: keycloak-fixpoint
    command: [ "start" ] # Tylko start, BEZ importu
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres-fixpoint
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_PROXY: "edge"
      KC_HTTP_ENABLED: "true"
    volumes:
      # WAŻNE: BRAK mapowania folderu import
      - ./backend/keycloak/conf/keycloak.conf:/opt/keycloak/conf/keycloak.conf:ro
    # ... (reszta keycloaka bez zmian) ...
    depends_on:
      - postgres-fixpoint
    ports:
      - "8081:8080"
      - "9001:9000"
    networks:
      - fixpoint-network

  # ... (reszta serwisów bez zmian) ...
  redis-fixpoint:
    image: redis:latest
    container_name: redis-fixpoint
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fixpoint-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: angular-frontend
    ports:
      - "4200:80"
    networks:
      - fixpoint-network

networks:
  fixpoint-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: